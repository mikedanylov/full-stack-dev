{
  "name": "csstyle",
  "version": "1.5.0",
  "description": "clean, simple styling for styling the web.",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "lodash": "^3.2.0"
  },
  "devDependencies": {
    "fs-extra": "^0.16.3",
    "glob": "^4.3.5",
    "grunt": "~0.4.5",
    "grunt-release": "~0.12.0",
    "jasmine-node": "^1.14.5",
    "postcss": "^4.0.4",
    "postcss-nested": "^0.2.1",
    "postcss-simple-vars": "^0.2.3",
    "shelljs": "~0.3.0",
    "specificity": "~0.1.4"
  },
  "main": "csstyle.js",
  "scripts": {
    "test": "jasmine-node spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/geddski/csstyle.git"
  },
  "keywords": [
    "css",
    "sass",
    "scss",
    "web",
    "components",
    "styling",
    "mixins",
    "method",
    "approach"
  ],
  "author": {
    "name": "Dave Geddes"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/geddski/csstyle/issues"
  },
  "homepage": "http://www.csstyle.io",
  "readme": "# [csstyle](http://csstyle.io)\n[![csstyle](https://github.com/geddski/csstyle/blob/master/site/common/images/csstyle.png)](http://csstyle.io)\n\nClean, simple, for styling the web.\n\nCheck out the docs and examples on [csstyle.io](http://csstyle.io)\n\nYou can use csstyle with either [Sass](http://sass-lang.com/) or [postcss](https://github.com/postcss/postcss).\n\n## Getting Started\n1. Setup your project with either Sass or Postcss. If you're using Sass make sure you have the latest stable SASS (3.4).\n\n2. Add `id=\"csstyle\"` to your html or body element. This is necessary so that components with their\nparts and options can nest indefinitely yet always be overridden by tweaks and locations.\n\n3. Download csstyle from npm:\n\n    ```\n    npm install csstyle --save\n    ```\n\n    or from bower:\n    ```\n    bower install csstyle --save\n    ```\n    \n4. If you're using Sass, import into your stylesheets:\n```scss\n@import 'csstyle';\n```\n\nIf you're using postcss, add csstyle as a plugin:\n```js\npostcss([require('postcss-nested'), require('csstyle')]);\n```\nBe sure to include postcss-nested and csstyle in that order.\n\nNow you're set and can start creating components with options & parts, adding in tweaks and locations as needed. Enjoy!\n\n## Customizing Styling Conventions\ncsstyle lets you change the style conventions to whatever suits your style.\n\n### Default Symbols\n- `options`: `\\--`\n- `parts`: `__`\n- `tweaks`: `\\+`\n- `locations`: `\\@`\n- `rootId`: `csstyle`\n\n### With SASS\nOverride the defaults using SASS variables.\n- `options`: `$csstyle-option-symbol`\n- `parts`: `$csstyle-part-symbol`\n- `tweaks`: `$csstyle-tweak-symbol`\n- `locations`: `$csstyle-location-symbol`\n- `rootId`: `$csstyle-root-id`\n\nExample: \n```scss\n  $csstyle-part-symbol: '\\\\/';\n  $csstyle-root-id: 'app';\n```\n\n### With Postcss\nOverride the defaults by calling the cssytle function with an options object.\n- `options`: `optionSymbol`\n- `parts`: `partSymbol`\n- `tweaks`: `tweakSymbol`\n- `locations`: `locationSymbol`\n- `rootId`: `rootId`\n\nExample: \n\n```js\n  require('../csstyle')({optionSymbol: '\\\\-', partSymbol: '\\\\/', rootId: 'app'})\n```\n\n**IMPORTANT NOTE** All characters besides `_` need to be escaped! However, if you are using dashes, only _the first one_ needs to be escaped. Use two backslashes to properly escape. For example to use a forward slash to separate parts, set $csstyle-part-symbol to `\\\\/`. The generated CSS classes will then be escaped with a single backslash.\n\n\n## FAQ\n\n### Can I use this with Libsass?\nYes. Libsass version 3.2.0 or greater fully supports csstyle.\n\n### How do parts react to component states like hover?\nIn Sass you can append a `&` to a selector or pseudo-selector to have it applied to the parent context. So for example to have a `part` react when the `component` gets hovered:\n\n```scss\n@include component(capacitor){\n  background: red;\n  \n  @include part(flux){\n    background: orange;\n  }\n  \n  &:hover & {\n    @include part(flux){\n      background: blue;\n    }\n  }\n}\n```\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "csstyle@1.5.0",
  "dist": {
    "shasum": "127a2ce579dd9c6860fbd2e083ceb1e2e1f63ddf"
  },
  "_from": "csstyle@^1.3.1",
  "_resolved": "https://registry.npmjs.org/csstyle/-/csstyle-1.5.0.tgz"
}
